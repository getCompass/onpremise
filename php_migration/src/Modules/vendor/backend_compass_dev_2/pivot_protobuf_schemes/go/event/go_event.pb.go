// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: proto/go_event.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// формат запроса для Event.SetEventTrap
type EventSetEventTrapRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueKey    string            `protobuf:"bytes,1,opt,name=unique_key,json=uniqueKey,proto3" json:"unique_key,omitempty"`
	Subscriber   string            `protobuf:"bytes,2,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	CreatedAfter int64             `protobuf:"varint,3,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	EventType    string            `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Translations map[string]string `protobuf:"bytes,5,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CompanyId    int64             `protobuf:"varint,6,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	IsGlobal     bool              `protobuf:"varint,7,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
}

func (x *EventSetEventTrapRequestStruct) Reset() {
	*x = EventSetEventTrapRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSetEventTrapRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSetEventTrapRequestStruct) ProtoMessage() {}

func (x *EventSetEventTrapRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSetEventTrapRequestStruct.ProtoReflect.Descriptor instead.
func (*EventSetEventTrapRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventSetEventTrapRequestStruct) GetUniqueKey() string {
	if x != nil {
		return x.UniqueKey
	}
	return ""
}

func (x *EventSetEventTrapRequestStruct) GetSubscriber() string {
	if x != nil {
		return x.Subscriber
	}
	return ""
}

func (x *EventSetEventTrapRequestStruct) GetCreatedAfter() int64 {
	if x != nil {
		return x.CreatedAfter
	}
	return 0
}

func (x *EventSetEventTrapRequestStruct) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EventSetEventTrapRequestStruct) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

func (x *EventSetEventTrapRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *EventSetEventTrapRequestStruct) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

// формат ответа для Event.SetEventTrap
type EventSetEventTrapResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventSetEventTrapResponseStruct) Reset() {
	*x = EventSetEventTrapResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSetEventTrapResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSetEventTrapResponseStruct) ProtoMessage() {}

func (x *EventSetEventTrapResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSetEventTrapResponseStruct.ProtoReflect.Descriptor instead.
func (*EventSetEventTrapResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_event_proto_rawDescGZIP(), []int{1}
}

// формат запроса для Event.WaitEventTrap
type EventWaitEventTrapRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueKey string `protobuf:"bytes,1,opt,name=unique_key,json=uniqueKey,proto3" json:"unique_key,omitempty"`
	CompanyId int64  `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	IsGlobal  bool   `protobuf:"varint,3,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
}

func (x *EventWaitEventTrapRequestStruct) Reset() {
	*x = EventWaitEventTrapRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventWaitEventTrapRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventWaitEventTrapRequestStruct) ProtoMessage() {}

func (x *EventWaitEventTrapRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventWaitEventTrapRequestStruct.ProtoReflect.Descriptor instead.
func (*EventWaitEventTrapRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_event_proto_rawDescGZIP(), []int{2}
}

func (x *EventWaitEventTrapRequestStruct) GetUniqueKey() string {
	if x != nil {
		return x.UniqueKey
	}
	return ""
}

func (x *EventWaitEventTrapRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *EventWaitEventTrapRequestStruct) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

// формат ответа для Event.WaitEventTrap
type EventWaitEventTrapResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFound int32 `protobuf:"varint,1,opt,name=is_found,json=isFound,proto3" json:"is_found,omitempty"`
}

func (x *EventWaitEventTrapResponseStruct) Reset() {
	*x = EventWaitEventTrapResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventWaitEventTrapResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventWaitEventTrapResponseStruct) ProtoMessage() {}

func (x *EventWaitEventTrapResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventWaitEventTrapResponseStruct.ProtoReflect.Descriptor instead.
func (*EventWaitEventTrapResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_event_proto_rawDescGZIP(), []int{3}
}

func (x *EventWaitEventTrapResponseStruct) GetIsFound() int32 {
	if x != nil {
		return x.IsFound
	}
	return 0
}

// формат запроса для Task.Push
type TaskPushRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueKey  string `protobuf:"bytes,1,opt,name=unique_key,json=uniqueKey,proto3" json:"unique_key,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data       string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Module     string `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	Group      string `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	NeedWork   int64  `protobuf:"varint,6,opt,name=need_work,json=needWork,proto3" json:"need_work,omitempty"`
	ErrorLimit int64  `protobuf:"varint,7,opt,name=error_limit,json=errorLimit,proto3" json:"error_limit,omitempty"`
	CompanyId  int64  `protobuf:"varint,8,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	IsGlobal   bool   `protobuf:"varint,9,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
}

func (x *TaskPushRequestStruct) Reset() {
	*x = TaskPushRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPushRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPushRequestStruct) ProtoMessage() {}

func (x *TaskPushRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPushRequestStruct.ProtoReflect.Descriptor instead.
func (*TaskPushRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_event_proto_rawDescGZIP(), []int{4}
}

func (x *TaskPushRequestStruct) GetUniqueKey() string {
	if x != nil {
		return x.UniqueKey
	}
	return ""
}

func (x *TaskPushRequestStruct) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaskPushRequestStruct) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskPushRequestStruct) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *TaskPushRequestStruct) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *TaskPushRequestStruct) GetNeedWork() int64 {
	if x != nil {
		return x.NeedWork
	}
	return 0
}

func (x *TaskPushRequestStruct) GetErrorLimit() int64 {
	if x != nil {
		return x.ErrorLimit
	}
	return 0
}

func (x *TaskPushRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *TaskPushRequestStruct) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

// формат ответа для Task.Push
type TaskPushResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskPushResponseStruct) Reset() {
	*x = TaskPushResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPushResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPushResponseStruct) ProtoMessage() {}

func (x *TaskPushResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPushResponseStruct.ProtoReflect.Descriptor instead.
func (*TaskPushResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_event_proto_rawDescGZIP(), []int{5}
}

var File_proto_go_event_proto protoreflect.FileDescriptor

var file_proto_go_event_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x70,
	0x63, 0x22, 0x81, 0x03, 0x0a, 0x1e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x1f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x7c, 0x0a, 0x1f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x3d, 0x0a, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57,
	0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x18,
	0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x32, 0xb9, 0x02, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x70, 0x12, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x70, 0x12, 0x2a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x12, 0x20, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_go_event_proto_rawDescOnce sync.Once
	file_proto_go_event_proto_rawDescData = file_proto_go_event_proto_rawDesc
)

func file_proto_go_event_proto_rawDescGZIP() []byte {
	file_proto_go_event_proto_rawDescOnce.Do(func() {
		file_proto_go_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_go_event_proto_rawDescData)
	})
	return file_proto_go_event_proto_rawDescData
}

var file_proto_go_event_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_go_event_proto_goTypes = []interface{}{
	(*EventSetEventTrapRequestStruct)(nil),   // 0: eventGrpc.EventSetEventTrapRequestStruct
	(*EventSetEventTrapResponseStruct)(nil),  // 1: eventGrpc.EventSetEventTrapResponseStruct
	(*EventWaitEventTrapRequestStruct)(nil),  // 2: eventGrpc.EventWaitEventTrapRequestStruct
	(*EventWaitEventTrapResponseStruct)(nil), // 3: eventGrpc.EventWaitEventTrapResponseStruct
	(*TaskPushRequestStruct)(nil),            // 4: eventGrpc.TaskPushRequestStruct
	(*TaskPushResponseStruct)(nil),           // 5: eventGrpc.TaskPushResponseStruct
	nil,                                      // 6: eventGrpc.EventSetEventTrapRequestStruct.TranslationsEntry
}
var file_proto_go_event_proto_depIdxs = []int32{
	6, // 0: eventGrpc.EventSetEventTrapRequestStruct.translations:type_name -> eventGrpc.EventSetEventTrapRequestStruct.TranslationsEntry
	0, // 1: eventGrpc.event.EventSetEventTrap:input_type -> eventGrpc.EventSetEventTrapRequestStruct
	2, // 2: eventGrpc.event.EventWaitEventTrap:input_type -> eventGrpc.EventWaitEventTrapRequestStruct
	4, // 3: eventGrpc.event.TaskPush:input_type -> eventGrpc.TaskPushRequestStruct
	1, // 4: eventGrpc.event.EventSetEventTrap:output_type -> eventGrpc.EventSetEventTrapResponseStruct
	3, // 5: eventGrpc.event.EventWaitEventTrap:output_type -> eventGrpc.EventWaitEventTrapResponseStruct
	5, // 6: eventGrpc.event.TaskPush:output_type -> eventGrpc.TaskPushResponseStruct
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_go_event_proto_init() }
func file_proto_go_event_proto_init() {
	if File_proto_go_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_go_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSetEventTrapRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSetEventTrapResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventWaitEventTrapRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventWaitEventTrapResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPushRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPushResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_go_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_go_event_proto_goTypes,
		DependencyIndexes: file_proto_go_event_proto_depIdxs,
		MessageInfos:      file_proto_go_event_proto_msgTypes,
	}.Build()
	File_proto_go_event_proto = out.File
	file_proto_go_event_proto_rawDesc = nil
	file_proto_go_event_proto_goTypes = nil
	file_proto_go_event_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventClient interface {
	EventSetEventTrap(ctx context.Context, in *EventSetEventTrapRequestStruct, opts ...grpc.CallOption) (*EventSetEventTrapResponseStruct, error)
	EventWaitEventTrap(ctx context.Context, in *EventWaitEventTrapRequestStruct, opts ...grpc.CallOption) (*EventWaitEventTrapResponseStruct, error)
	TaskPush(ctx context.Context, in *TaskPushRequestStruct, opts ...grpc.CallOption) (*TaskPushResponseStruct, error)
}

type eventClient struct {
	cc grpc.ClientConnInterface
}

func NewEventClient(cc grpc.ClientConnInterface) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) EventSetEventTrap(ctx context.Context, in *EventSetEventTrapRequestStruct, opts ...grpc.CallOption) (*EventSetEventTrapResponseStruct, error) {
	out := new(EventSetEventTrapResponseStruct)
	err := c.cc.Invoke(ctx, "/eventGrpc.event/EventSetEventTrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) EventWaitEventTrap(ctx context.Context, in *EventWaitEventTrapRequestStruct, opts ...grpc.CallOption) (*EventWaitEventTrapResponseStruct, error) {
	out := new(EventWaitEventTrapResponseStruct)
	err := c.cc.Invoke(ctx, "/eventGrpc.event/EventWaitEventTrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) TaskPush(ctx context.Context, in *TaskPushRequestStruct, opts ...grpc.CallOption) (*TaskPushResponseStruct, error) {
	out := new(TaskPushResponseStruct)
	err := c.cc.Invoke(ctx, "/eventGrpc.event/TaskPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServer is the server API for Event service.
type EventServer interface {
	EventSetEventTrap(context.Context, *EventSetEventTrapRequestStruct) (*EventSetEventTrapResponseStruct, error)
	EventWaitEventTrap(context.Context, *EventWaitEventTrapRequestStruct) (*EventWaitEventTrapResponseStruct, error)
	TaskPush(context.Context, *TaskPushRequestStruct) (*TaskPushResponseStruct, error)
}

// UnimplementedEventServer can be embedded to have forward compatible implementations.
type UnimplementedEventServer struct {
}

func (*UnimplementedEventServer) EventSetEventTrap(context.Context, *EventSetEventTrapRequestStruct) (*EventSetEventTrapResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventSetEventTrap not implemented")
}
func (*UnimplementedEventServer) EventWaitEventTrap(context.Context, *EventWaitEventTrapRequestStruct) (*EventWaitEventTrapResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventWaitEventTrap not implemented")
}
func (*UnimplementedEventServer) TaskPush(context.Context, *TaskPushRequestStruct) (*TaskPushResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskPush not implemented")
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_EventSetEventTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSetEventTrapRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).EventSetEventTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventGrpc.event/EventSetEventTrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).EventSetEventTrap(ctx, req.(*EventSetEventTrapRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_EventWaitEventTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventWaitEventTrapRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).EventWaitEventTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventGrpc.event/EventWaitEventTrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).EventWaitEventTrap(ctx, req.(*EventWaitEventTrapRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_TaskPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskPushRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).TaskPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventGrpc.event/TaskPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).TaskPush(ctx, req.(*TaskPushRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventGrpc.event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EventSetEventTrap",
			Handler:    _Event_EventSetEventTrap_Handler,
		},
		{
			MethodName: "EventWaitEventTrap",
			Handler:    _Event_EventWaitEventTrap_Handler,
		},
		{
			MethodName: "TaskPush",
			Handler:    _Event_TaskPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/go_event.proto",
}
