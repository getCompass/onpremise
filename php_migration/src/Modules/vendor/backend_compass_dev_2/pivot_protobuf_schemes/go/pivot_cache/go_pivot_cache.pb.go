// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: proto/go_pivot_cache.proto

package pivot_cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// формат запроса для session.getInfo
type SessionGetInfoRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId     string `protobuf:"bytes,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	TableId     string `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	SessionUniq string `protobuf:"bytes,3,opt,name=session_uniq,json=sessionUniq,proto3" json:"session_uniq,omitempty"`
}

func (x *SessionGetInfoRequestStruct) Reset() {
	*x = SessionGetInfoRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGetInfoRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGetInfoRequestStruct) ProtoMessage() {}

func (x *SessionGetInfoRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGetInfoRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionGetInfoRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{0}
}

func (x *SessionGetInfoRequestStruct) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *SessionGetInfoRequestStruct) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *SessionGetInfoRequestStruct) GetSessionUniq() string {
	if x != nil {
		return x.SessionUniq
	}
	return ""
}

// формат ответа для session.getInfo
type SessionGetInfoResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RefreshedAt int32 `protobuf:"varint,2,opt,name=refreshed_at,json=refreshedAt,proto3" json:"refreshed_at,omitempty"`
}

func (x *SessionGetInfoResponseStruct) Reset() {
	*x = SessionGetInfoResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGetInfoResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGetInfoResponseStruct) ProtoMessage() {}

func (x *SessionGetInfoResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGetInfoResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionGetInfoResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{1}
}

func (x *SessionGetInfoResponseStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionGetInfoResponseStruct) GetRefreshedAt() int32 {
	if x != nil {
		return x.RefreshedAt
	}
	return 0
}

// формат запроса для session.deleteByUserId
type SessionDeleteByUserIdRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SessionDeleteByUserIdRequestStruct) Reset() {
	*x = SessionDeleteByUserIdRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteByUserIdRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteByUserIdRequestStruct) ProtoMessage() {}

func (x *SessionDeleteByUserIdRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteByUserIdRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteByUserIdRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{2}
}

func (x *SessionDeleteByUserIdRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// формат ответа для session.deleteByUserId
type SessionDeleteByUserIdResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionDeleteByUserIdResponseStruct) Reset() {
	*x = SessionDeleteByUserIdResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteByUserIdResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteByUserIdResponseStruct) ProtoMessage() {}

func (x *SessionDeleteByUserIdResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteByUserIdResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteByUserIdResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{3}
}

// формат запроса для session.deleteBySessionUniq
type SessionDeleteBySessionUniqRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUniq string `protobuf:"bytes,1,opt,name=session_uniq,json=sessionUniq,proto3" json:"session_uniq,omitempty"`
}

func (x *SessionDeleteBySessionUniqRequestStruct) Reset() {
	*x = SessionDeleteBySessionUniqRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteBySessionUniqRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteBySessionUniqRequestStruct) ProtoMessage() {}

func (x *SessionDeleteBySessionUniqRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteBySessionUniqRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteBySessionUniqRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{4}
}

func (x *SessionDeleteBySessionUniqRequestStruct) GetSessionUniq() string {
	if x != nil {
		return x.SessionUniq
	}
	return ""
}

// формат ответа для session.deleteBySessionUniq
type SessionDeleteBySessionUniqResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionDeleteBySessionUniqResponseStruct) Reset() {
	*x = SessionDeleteBySessionUniqResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteBySessionUniqResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteBySessionUniqResponseStruct) ProtoMessage() {}

func (x *SessionDeleteBySessionUniqResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteBySessionUniqResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteBySessionUniqResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{5}
}

// формат запроса для session.deleteUserInfo
type SessionDeleteUserInfoRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SessionDeleteUserInfoRequestStruct) Reset() {
	*x = SessionDeleteUserInfoRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteUserInfoRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteUserInfoRequestStruct) ProtoMessage() {}

func (x *SessionDeleteUserInfoRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteUserInfoRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteUserInfoRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{6}
}

func (x *SessionDeleteUserInfoRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// формат ответа для session.deleteUserInfo
type SessionDeleteUserInfoResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionDeleteUserInfoResponseStruct) Reset() {
	*x = SessionDeleteUserInfoResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteUserInfoResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteUserInfoResponseStruct) ProtoMessage() {}

func (x *SessionDeleteUserInfoResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteUserInfoResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteUserInfoResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{7}
}

// формат запроса для system.status
type SystemStatusRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemStatusRequestStruct) Reset() {
	*x = SystemStatusRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusRequestStruct) ProtoMessage() {}

func (x *SystemStatusRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemStatusRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{8}
}

// формат ответа для system.status
type SystemStatusResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Goroutines int64  `protobuf:"varint,2,opt,name=goroutines,proto3" json:"goroutines,omitempty"`
	Memory     int64  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	MemoryKb   string `protobuf:"bytes,4,opt,name=memory_kb,json=memoryKb,proto3" json:"memory_kb,omitempty"`
	MemoryMb   string `protobuf:"bytes,5,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	Uptime     int32  `protobuf:"varint,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *SystemStatusResponseStruct) Reset() {
	*x = SystemStatusResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponseStruct) ProtoMessage() {}

func (x *SystemStatusResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemStatusResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{9}
}

func (x *SystemStatusResponseStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetGoroutines() int64 {
	if x != nil {
		return x.Goroutines
	}
	return 0
}

func (x *SystemStatusResponseStruct) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *SystemStatusResponseStruct) GetMemoryKb() string {
	if x != nil {
		return x.MemoryKb
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetMemoryMb() string {
	if x != nil {
		return x.MemoryMb
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetUptime() int32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

// формат запроса для system.traceGoroutine
type SystemTraceGoroutineRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceGoroutineRequestStruct) Reset() {
	*x = SystemTraceGoroutineRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceGoroutineRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceGoroutineRequestStruct) ProtoMessage() {}

func (x *SystemTraceGoroutineRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceGoroutineRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceGoroutineRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{10}
}

// формат ответа для system.traceGoroutine
type SystemTraceGoroutineResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceGoroutineResponseStruct) Reset() {
	*x = SystemTraceGoroutineResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceGoroutineResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceGoroutineResponseStruct) ProtoMessage() {}

func (x *SystemTraceGoroutineResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceGoroutineResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceGoroutineResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{11}
}

// формат запроса для system.traceMemory
type SystemTraceMemoryRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceMemoryRequestStruct) Reset() {
	*x = SystemTraceMemoryRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceMemoryRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceMemoryRequestStruct) ProtoMessage() {}

func (x *SystemTraceMemoryRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceMemoryRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceMemoryRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{12}
}

// формат ответа для system.traceMemory
type SystemTraceMemoryResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceMemoryResponseStruct) Reset() {
	*x = SystemTraceMemoryResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceMemoryResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceMemoryResponseStruct) ProtoMessage() {}

func (x *SystemTraceMemoryResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceMemoryResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceMemoryResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{13}
}

// формат запроса для system.cpuProfile
type SystemCpuProfileRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SystemCpuProfileRequestStruct) Reset() {
	*x = SystemCpuProfileRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCpuProfileRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCpuProfileRequestStruct) ProtoMessage() {}

func (x *SystemCpuProfileRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCpuProfileRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemCpuProfileRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{14}
}

func (x *SystemCpuProfileRequestStruct) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// формат ответа для system.cpuProfile
type SystemCpuProfileResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemCpuProfileResponseStruct) Reset() {
	*x = SystemCpuProfileResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCpuProfileResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCpuProfileResponseStruct) ProtoMessage() {}

func (x *SystemCpuProfileResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCpuProfileResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemCpuProfileResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{15}
}

// формат запроса для system.reloadConfig
type SystemReloadConfigRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadConfigRequestStruct) Reset() {
	*x = SystemReloadConfigRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadConfigRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadConfigRequestStruct) ProtoMessage() {}

func (x *SystemReloadConfigRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadConfigRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadConfigRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{16}
}

// формат ответа для system.reloadConfig
type SystemReloadConfigResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggingLevel   int32  `protobuf:"varint,1,opt,name=logging_level,json=loggingLevel,proto3" json:"logging_level,omitempty"`
	ServerType     string `protobuf:"bytes,2,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty"`
	TcpPort        int64  `protobuf:"varint,3,opt,name=tcp_port,json=tcpPort,proto3" json:"tcp_port,omitempty"`
	GrpcPort       int64  `protobuf:"varint,4,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	RabbitQueue    string `protobuf:"bytes,5,opt,name=rabbit_queue,json=rabbitQueue,proto3" json:"rabbit_queue,omitempty"`
	RabbitExchange string `protobuf:"bytes,6,opt,name=rabbit_exchange,json=rabbitExchange,proto3" json:"rabbit_exchange,omitempty"`
}

func (x *SystemReloadConfigResponseStruct) Reset() {
	*x = SystemReloadConfigResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadConfigResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadConfigResponseStruct) ProtoMessage() {}

func (x *SystemReloadConfigResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadConfigResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadConfigResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{17}
}

func (x *SystemReloadConfigResponseStruct) GetLoggingLevel() int32 {
	if x != nil {
		return x.LoggingLevel
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetServerType() string {
	if x != nil {
		return x.ServerType
	}
	return ""
}

func (x *SystemReloadConfigResponseStruct) GetTcpPort() int64 {
	if x != nil {
		return x.TcpPort
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetGrpcPort() int64 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetRabbitQueue() string {
	if x != nil {
		return x.RabbitQueue
	}
	return ""
}

func (x *SystemReloadConfigResponseStruct) GetRabbitExchange() string {
	if x != nil {
		return x.RabbitExchange
	}
	return ""
}

// формат запроса для system.reloadSharding
type SystemReloadShardingRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadShardingRequestStruct) Reset() {
	*x = SystemReloadShardingRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadShardingRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadShardingRequestStruct) ProtoMessage() {}

func (x *SystemReloadShardingRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadShardingRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadShardingRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{18}
}

// формат ответа для system.reloadSharding
type SystemReloadShardingResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadShardingResponseStruct) Reset() {
	*x = SystemReloadShardingResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadShardingResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadShardingResponseStruct) ProtoMessage() {}

func (x *SystemReloadShardingResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadShardingResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadShardingResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{19}
}

// формат запроса для system.checkSharding
type SystemCheckShardingRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemCheckShardingRequestStruct) Reset() {
	*x = SystemCheckShardingRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCheckShardingRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCheckShardingRequestStruct) ProtoMessage() {}

func (x *SystemCheckShardingRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCheckShardingRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemCheckShardingRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{20}
}

// формат ответа для system.checkSharding
type SystemCheckShardingResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemCheckShardingResponseStruct) Reset() {
	*x = SystemCheckShardingResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCheckShardingResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCheckShardingResponseStruct) ProtoMessage() {}

func (x *SystemCheckShardingResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCheckShardingResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemCheckShardingResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{21}
}

// формат запроса для user.getInfo
type UsersGetInfoRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UsersGetInfoRequestStruct) Reset() {
	*x = UsersGetInfoRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersGetInfoRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersGetInfoRequestStruct) ProtoMessage() {}

func (x *UsersGetInfoRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersGetInfoRequestStruct.ProtoReflect.Descriptor instead.
func (*UsersGetInfoRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{22}
}

func (x *UsersGetInfoRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// формат ответа для user.getInfo
type UsersGetInfoResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NpcType              int32  `protobuf:"varint,2,opt,name=npc_type,json=npcType,proto3" json:"npc_type,omitempty"`
	InvitedByPartnerId   int64  `protobuf:"varint,3,opt,name=invited_by_partner_id,json=invitedByPartnerId,proto3" json:"invited_by_partner_id,omitempty"`
	LastActiveDayStartAt int64  `protobuf:"varint,4,opt,name=last_active_day_start_at,json=lastActiveDayStartAt,proto3" json:"last_active_day_start_at,omitempty"`
	InvitedByUserId      int64  `protobuf:"varint,5,opt,name=invited_by_user_id,json=invitedByUserId,proto3" json:"invited_by_user_id,omitempty"`
	CreatedAt            int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FullNameUpdatedAt    int64  `protobuf:"varint,8,opt,name=full_name_updated_at,json=fullNameUpdatedAt,proto3" json:"full_name_updated_at,omitempty"`
	CountryCode          string `protobuf:"bytes,9,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	FullName             string `protobuf:"bytes,10,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	AvatarFileMap        string `protobuf:"bytes,11,opt,name=avatar_file_map,json=avatarFileMap,proto3" json:"avatar_file_map,omitempty"`
	Extra                string `protobuf:"bytes,12,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *UsersGetInfoResponseStruct) Reset() {
	*x = UsersGetInfoResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersGetInfoResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersGetInfoResponseStruct) ProtoMessage() {}

func (x *UsersGetInfoResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersGetInfoResponseStruct.ProtoReflect.Descriptor instead.
func (*UsersGetInfoResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{23}
}

func (x *UsersGetInfoResponseStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UsersGetInfoResponseStruct) GetNpcType() int32 {
	if x != nil {
		return x.NpcType
	}
	return 0
}

func (x *UsersGetInfoResponseStruct) GetInvitedByPartnerId() int64 {
	if x != nil {
		return x.InvitedByPartnerId
	}
	return 0
}

func (x *UsersGetInfoResponseStruct) GetLastActiveDayStartAt() int64 {
	if x != nil {
		return x.LastActiveDayStartAt
	}
	return 0
}

func (x *UsersGetInfoResponseStruct) GetInvitedByUserId() int64 {
	if x != nil {
		return x.InvitedByUserId
	}
	return 0
}

func (x *UsersGetInfoResponseStruct) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UsersGetInfoResponseStruct) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UsersGetInfoResponseStruct) GetFullNameUpdatedAt() int64 {
	if x != nil {
		return x.FullNameUpdatedAt
	}
	return 0
}

func (x *UsersGetInfoResponseStruct) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UsersGetInfoResponseStruct) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UsersGetInfoResponseStruct) GetAvatarFileMap() string {
	if x != nil {
		return x.AvatarFileMap
	}
	return ""
}

func (x *UsersGetInfoResponseStruct) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// формат запроса для user.getInfoList
type UsersGetInfoListRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdList []int64 `protobuf:"varint,1,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
}

func (x *UsersGetInfoListRequestStruct) Reset() {
	*x = UsersGetInfoListRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersGetInfoListRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersGetInfoListRequestStruct) ProtoMessage() {}

func (x *UsersGetInfoListRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersGetInfoListRequestStruct.ProtoReflect.Descriptor instead.
func (*UsersGetInfoListRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{24}
}

func (x *UsersGetInfoListRequestStruct) GetUserIdList() []int64 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// формат ответа для user.getInfoList
type UsersGetInfoListResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserList []*UsersGetInfoResponseStruct `protobuf:"bytes,1,rep,name=userList,proto3" json:"userList,omitempty"`
}

func (x *UsersGetInfoListResponseStruct) Reset() {
	*x = UsersGetInfoListResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersGetInfoListResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersGetInfoListResponseStruct) ProtoMessage() {}

func (x *UsersGetInfoListResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersGetInfoListResponseStruct.ProtoReflect.Descriptor instead.
func (*UsersGetInfoListResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{25}
}

func (x *UsersGetInfoListResponseStruct) GetUserList() []*UsersGetInfoResponseStruct {
	if x != nil {
		return x.UserList
	}
	return nil
}

// запрос на очистку всего кэша пользователей
type ResetCacheRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetCacheRequestStruct) Reset() {
	*x = ResetCacheRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCacheRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCacheRequestStruct) ProtoMessage() {}

func (x *ResetCacheRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCacheRequestStruct.ProtoReflect.Descriptor instead.
func (*ResetCacheRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{26}
}

// ответа на запрос на очистку всего кэша пользователей
type ResetCacheResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetCacheResponseStruct) Reset() {
	*x = ResetCacheResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCacheResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCacheResponseStruct) ProtoMessage() {}

func (x *ResetCacheResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCacheResponseStruct.ProtoReflect.Descriptor instead.
func (*ResetCacheResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{27}
}

// запрос на очистку всего кэша пользователей
type UserResetCacheRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserResetCacheRequestStruct) Reset() {
	*x = UserResetCacheRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResetCacheRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResetCacheRequestStruct) ProtoMessage() {}

func (x *UserResetCacheRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResetCacheRequestStruct.ProtoReflect.Descriptor instead.
func (*UserResetCacheRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{28}
}

// ответа на запрос на очистку всего кэша пользователей
type UserResetCacheResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserResetCacheResponseStruct) Reset() {
	*x = UserResetCacheResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResetCacheResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResetCacheResponseStruct) ProtoMessage() {}

func (x *UserResetCacheResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResetCacheResponseStruct.ProtoReflect.Descriptor instead.
func (*UserResetCacheResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{29}
}

// запрос на очистку всего кэша пользователей
type SessionResetCacheRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionResetCacheRequestStruct) Reset() {
	*x = SessionResetCacheRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResetCacheRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResetCacheRequestStruct) ProtoMessage() {}

func (x *SessionResetCacheRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResetCacheRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionResetCacheRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{30}
}

// ответа на запрос на очистку всего кэша пользователей
type SessionResetCacheResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionResetCacheResponseStruct) Reset() {
	*x = SessionResetCacheResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_pivot_cache_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResetCacheResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResetCacheResponseStruct) ProtoMessage() {}

func (x *SessionResetCacheResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_pivot_cache_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResetCacheResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionResetCacheResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_pivot_cache_proto_rawDescGZIP(), []int{31}
}

var File_proto_go_pivot_cache_proto protoreflect.FileDescriptor

var file_proto_go_pivot_cache_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x22, 0x76, 0x0a, 0x1b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x22, 0x5a, 0x0a, 0x1c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x3d, 0x0a, 0x22, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x25, 0x0a, 0x23, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x4c, 0x0a, 0x27, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x3d, 0x0a, 0x22, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x25, 0x0a, 0x23, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x6f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x23, 0x0a, 0x21, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47,
	0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x21, 0x0a,
	0x1f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x33, 0x0a, 0x1d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x20, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x24,
	0x0a, 0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x34, 0x0a,
	0x19, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xd5, 0x03, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x70, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x14,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x41, 0x0a, 0x1d, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x68,
	0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x46, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x1d, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x1e,
	0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x20,
	0x0a, 0x1e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x32, 0xad, 0x0e, 0x0a, 0x0a, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x71, 0x12, 0x37, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x38,
	0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x12, 0x31, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2e,
	0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2f,
	0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x2e, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x2e, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x32, 0x2e, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x2e, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x29, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2b,
	0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x2e, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x1a, 0x2f, 0x2e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_go_pivot_cache_proto_rawDescOnce sync.Once
	file_proto_go_pivot_cache_proto_rawDescData = file_proto_go_pivot_cache_proto_rawDesc
)

func file_proto_go_pivot_cache_proto_rawDescGZIP() []byte {
	file_proto_go_pivot_cache_proto_rawDescOnce.Do(func() {
		file_proto_go_pivot_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_go_pivot_cache_proto_rawDescData)
	})
	return file_proto_go_pivot_cache_proto_rawDescData
}

var file_proto_go_pivot_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_proto_go_pivot_cache_proto_goTypes = []interface{}{
	(*SessionGetInfoRequestStruct)(nil),              // 0: pivotCacheGrpc.SessionGetInfoRequestStruct
	(*SessionGetInfoResponseStruct)(nil),             // 1: pivotCacheGrpc.SessionGetInfoResponseStruct
	(*SessionDeleteByUserIdRequestStruct)(nil),       // 2: pivotCacheGrpc.SessionDeleteByUserIdRequestStruct
	(*SessionDeleteByUserIdResponseStruct)(nil),      // 3: pivotCacheGrpc.SessionDeleteByUserIdResponseStruct
	(*SessionDeleteBySessionUniqRequestStruct)(nil),  // 4: pivotCacheGrpc.SessionDeleteBySessionUniqRequestStruct
	(*SessionDeleteBySessionUniqResponseStruct)(nil), // 5: pivotCacheGrpc.SessionDeleteBySessionUniqResponseStruct
	(*SessionDeleteUserInfoRequestStruct)(nil),       // 6: pivotCacheGrpc.SessionDeleteUserInfoRequestStruct
	(*SessionDeleteUserInfoResponseStruct)(nil),      // 7: pivotCacheGrpc.SessionDeleteUserInfoResponseStruct
	(*SystemStatusRequestStruct)(nil),                // 8: pivotCacheGrpc.SystemStatusRequestStruct
	(*SystemStatusResponseStruct)(nil),               // 9: pivotCacheGrpc.SystemStatusResponseStruct
	(*SystemTraceGoroutineRequestStruct)(nil),        // 10: pivotCacheGrpc.SystemTraceGoroutineRequestStruct
	(*SystemTraceGoroutineResponseStruct)(nil),       // 11: pivotCacheGrpc.SystemTraceGoroutineResponseStruct
	(*SystemTraceMemoryRequestStruct)(nil),           // 12: pivotCacheGrpc.SystemTraceMemoryRequestStruct
	(*SystemTraceMemoryResponseStruct)(nil),          // 13: pivotCacheGrpc.SystemTraceMemoryResponseStruct
	(*SystemCpuProfileRequestStruct)(nil),            // 14: pivotCacheGrpc.SystemCpuProfileRequestStruct
	(*SystemCpuProfileResponseStruct)(nil),           // 15: pivotCacheGrpc.SystemCpuProfileResponseStruct
	(*SystemReloadConfigRequestStruct)(nil),          // 16: pivotCacheGrpc.SystemReloadConfigRequestStruct
	(*SystemReloadConfigResponseStruct)(nil),         // 17: pivotCacheGrpc.SystemReloadConfigResponseStruct
	(*SystemReloadShardingRequestStruct)(nil),        // 18: pivotCacheGrpc.SystemReloadShardingRequestStruct
	(*SystemReloadShardingResponseStruct)(nil),       // 19: pivotCacheGrpc.SystemReloadShardingResponseStruct
	(*SystemCheckShardingRequestStruct)(nil),         // 20: pivotCacheGrpc.SystemCheckShardingRequestStruct
	(*SystemCheckShardingResponseStruct)(nil),        // 21: pivotCacheGrpc.SystemCheckShardingResponseStruct
	(*UsersGetInfoRequestStruct)(nil),                // 22: pivotCacheGrpc.UsersGetInfoRequestStruct
	(*UsersGetInfoResponseStruct)(nil),               // 23: pivotCacheGrpc.UsersGetInfoResponseStruct
	(*UsersGetInfoListRequestStruct)(nil),            // 24: pivotCacheGrpc.UsersGetInfoListRequestStruct
	(*UsersGetInfoListResponseStruct)(nil),           // 25: pivotCacheGrpc.UsersGetInfoListResponseStruct
	(*ResetCacheRequestStruct)(nil),                  // 26: pivotCacheGrpc.ResetCacheRequestStruct
	(*ResetCacheResponseStruct)(nil),                 // 27: pivotCacheGrpc.ResetCacheResponseStruct
	(*UserResetCacheRequestStruct)(nil),              // 28: pivotCacheGrpc.UserResetCacheRequestStruct
	(*UserResetCacheResponseStruct)(nil),             // 29: pivotCacheGrpc.UserResetCacheResponseStruct
	(*SessionResetCacheRequestStruct)(nil),           // 30: pivotCacheGrpc.SessionResetCacheRequestStruct
	(*SessionResetCacheResponseStruct)(nil),          // 31: pivotCacheGrpc.SessionResetCacheResponseStruct
}
var file_proto_go_pivot_cache_proto_depIdxs = []int32{
	23, // 0: pivotCacheGrpc.UsersGetInfoListResponseStruct.userList:type_name -> pivotCacheGrpc.UsersGetInfoResponseStruct
	0,  // 1: pivotCacheGrpc.pivotCache.SessionGetInfo:input_type -> pivotCacheGrpc.SessionGetInfoRequestStruct
	2,  // 2: pivotCacheGrpc.pivotCache.SessionDeleteByUserId:input_type -> pivotCacheGrpc.SessionDeleteByUserIdRequestStruct
	4,  // 3: pivotCacheGrpc.pivotCache.SessionDeleteBySessionUniq:input_type -> pivotCacheGrpc.SessionDeleteBySessionUniqRequestStruct
	6,  // 4: pivotCacheGrpc.pivotCache.SessionDeleteUserInfo:input_type -> pivotCacheGrpc.SessionDeleteUserInfoRequestStruct
	8,  // 5: pivotCacheGrpc.pivotCache.SystemStatus:input_type -> pivotCacheGrpc.SystemStatusRequestStruct
	10, // 6: pivotCacheGrpc.pivotCache.SystemTraceGoroutine:input_type -> pivotCacheGrpc.SystemTraceGoroutineRequestStruct
	12, // 7: pivotCacheGrpc.pivotCache.SystemTraceMemory:input_type -> pivotCacheGrpc.SystemTraceMemoryRequestStruct
	14, // 8: pivotCacheGrpc.pivotCache.SystemCpuProfile:input_type -> pivotCacheGrpc.SystemCpuProfileRequestStruct
	16, // 9: pivotCacheGrpc.pivotCache.SystemReloadConfig:input_type -> pivotCacheGrpc.SystemReloadConfigRequestStruct
	18, // 10: pivotCacheGrpc.pivotCache.SystemReloadSharding:input_type -> pivotCacheGrpc.SystemReloadShardingRequestStruct
	20, // 11: pivotCacheGrpc.pivotCache.SystemCheckSharding:input_type -> pivotCacheGrpc.SystemCheckShardingRequestStruct
	22, // 12: pivotCacheGrpc.pivotCache.UserGetInfo:input_type -> pivotCacheGrpc.UsersGetInfoRequestStruct
	24, // 13: pivotCacheGrpc.pivotCache.UserGetInfoList:input_type -> pivotCacheGrpc.UsersGetInfoListRequestStruct
	28, // 14: pivotCacheGrpc.pivotCache.UserResetCache:input_type -> pivotCacheGrpc.UserResetCacheRequestStruct
	30, // 15: pivotCacheGrpc.pivotCache.SessionResetCache:input_type -> pivotCacheGrpc.SessionResetCacheRequestStruct
	1,  // 16: pivotCacheGrpc.pivotCache.SessionGetInfo:output_type -> pivotCacheGrpc.SessionGetInfoResponseStruct
	3,  // 17: pivotCacheGrpc.pivotCache.SessionDeleteByUserId:output_type -> pivotCacheGrpc.SessionDeleteByUserIdResponseStruct
	5,  // 18: pivotCacheGrpc.pivotCache.SessionDeleteBySessionUniq:output_type -> pivotCacheGrpc.SessionDeleteBySessionUniqResponseStruct
	7,  // 19: pivotCacheGrpc.pivotCache.SessionDeleteUserInfo:output_type -> pivotCacheGrpc.SessionDeleteUserInfoResponseStruct
	9,  // 20: pivotCacheGrpc.pivotCache.SystemStatus:output_type -> pivotCacheGrpc.SystemStatusResponseStruct
	11, // 21: pivotCacheGrpc.pivotCache.SystemTraceGoroutine:output_type -> pivotCacheGrpc.SystemTraceGoroutineResponseStruct
	13, // 22: pivotCacheGrpc.pivotCache.SystemTraceMemory:output_type -> pivotCacheGrpc.SystemTraceMemoryResponseStruct
	15, // 23: pivotCacheGrpc.pivotCache.SystemCpuProfile:output_type -> pivotCacheGrpc.SystemCpuProfileResponseStruct
	17, // 24: pivotCacheGrpc.pivotCache.SystemReloadConfig:output_type -> pivotCacheGrpc.SystemReloadConfigResponseStruct
	19, // 25: pivotCacheGrpc.pivotCache.SystemReloadSharding:output_type -> pivotCacheGrpc.SystemReloadShardingResponseStruct
	21, // 26: pivotCacheGrpc.pivotCache.SystemCheckSharding:output_type -> pivotCacheGrpc.SystemCheckShardingResponseStruct
	23, // 27: pivotCacheGrpc.pivotCache.UserGetInfo:output_type -> pivotCacheGrpc.UsersGetInfoResponseStruct
	25, // 28: pivotCacheGrpc.pivotCache.UserGetInfoList:output_type -> pivotCacheGrpc.UsersGetInfoListResponseStruct
	29, // 29: pivotCacheGrpc.pivotCache.UserResetCache:output_type -> pivotCacheGrpc.UserResetCacheResponseStruct
	31, // 30: pivotCacheGrpc.pivotCache.SessionResetCache:output_type -> pivotCacheGrpc.SessionResetCacheResponseStruct
	16, // [16:31] is the sub-list for method output_type
	1,  // [1:16] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_proto_go_pivot_cache_proto_init() }
func file_proto_go_pivot_cache_proto_init() {
	if File_proto_go_pivot_cache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_go_pivot_cache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGetInfoRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGetInfoResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteByUserIdRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteByUserIdResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteBySessionUniqRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteBySessionUniqResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteUserInfoRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteUserInfoResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceGoroutineRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceGoroutineResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceMemoryRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceMemoryResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCpuProfileRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCpuProfileResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadConfigRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadConfigResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadShardingRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadShardingResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCheckShardingRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCheckShardingResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersGetInfoRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersGetInfoResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersGetInfoListRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersGetInfoListResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCacheRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCacheResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResetCacheRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResetCacheResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResetCacheRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_pivot_cache_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResetCacheResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_go_pivot_cache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_go_pivot_cache_proto_goTypes,
		DependencyIndexes: file_proto_go_pivot_cache_proto_depIdxs,
		MessageInfos:      file_proto_go_pivot_cache_proto_msgTypes,
	}.Build()
	File_proto_go_pivot_cache_proto = out.File
	file_proto_go_pivot_cache_proto_rawDesc = nil
	file_proto_go_pivot_cache_proto_goTypes = nil
	file_proto_go_pivot_cache_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PivotCacheClient is the client API for PivotCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PivotCacheClient interface {
	SessionGetInfo(ctx context.Context, in *SessionGetInfoRequestStruct, opts ...grpc.CallOption) (*SessionGetInfoResponseStruct, error)
	SessionDeleteByUserId(ctx context.Context, in *SessionDeleteByUserIdRequestStruct, opts ...grpc.CallOption) (*SessionDeleteByUserIdResponseStruct, error)
	SessionDeleteBySessionUniq(ctx context.Context, in *SessionDeleteBySessionUniqRequestStruct, opts ...grpc.CallOption) (*SessionDeleteBySessionUniqResponseStruct, error)
	SessionDeleteUserInfo(ctx context.Context, in *SessionDeleteUserInfoRequestStruct, opts ...grpc.CallOption) (*SessionDeleteUserInfoResponseStruct, error)
	SystemStatus(ctx context.Context, in *SystemStatusRequestStruct, opts ...grpc.CallOption) (*SystemStatusResponseStruct, error)
	SystemTraceGoroutine(ctx context.Context, in *SystemTraceGoroutineRequestStruct, opts ...grpc.CallOption) (*SystemTraceGoroutineResponseStruct, error)
	SystemTraceMemory(ctx context.Context, in *SystemTraceMemoryRequestStruct, opts ...grpc.CallOption) (*SystemTraceMemoryResponseStruct, error)
	SystemCpuProfile(ctx context.Context, in *SystemCpuProfileRequestStruct, opts ...grpc.CallOption) (*SystemCpuProfileResponseStruct, error)
	SystemReloadConfig(ctx context.Context, in *SystemReloadConfigRequestStruct, opts ...grpc.CallOption) (*SystemReloadConfigResponseStruct, error)
	SystemReloadSharding(ctx context.Context, in *SystemReloadShardingRequestStruct, opts ...grpc.CallOption) (*SystemReloadShardingResponseStruct, error)
	SystemCheckSharding(ctx context.Context, in *SystemCheckShardingRequestStruct, opts ...grpc.CallOption) (*SystemCheckShardingResponseStruct, error)
	UserGetInfo(ctx context.Context, in *UsersGetInfoRequestStruct, opts ...grpc.CallOption) (*UsersGetInfoResponseStruct, error)
	UserGetInfoList(ctx context.Context, in *UsersGetInfoListRequestStruct, opts ...grpc.CallOption) (*UsersGetInfoListResponseStruct, error)
	UserResetCache(ctx context.Context, in *UserResetCacheRequestStruct, opts ...grpc.CallOption) (*UserResetCacheResponseStruct, error)
	SessionResetCache(ctx context.Context, in *SessionResetCacheRequestStruct, opts ...grpc.CallOption) (*SessionResetCacheResponseStruct, error)
}

type pivotCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewPivotCacheClient(cc grpc.ClientConnInterface) PivotCacheClient {
	return &pivotCacheClient{cc}
}

func (c *pivotCacheClient) SessionGetInfo(ctx context.Context, in *SessionGetInfoRequestStruct, opts ...grpc.CallOption) (*SessionGetInfoResponseStruct, error) {
	out := new(SessionGetInfoResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SessionGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SessionDeleteByUserId(ctx context.Context, in *SessionDeleteByUserIdRequestStruct, opts ...grpc.CallOption) (*SessionDeleteByUserIdResponseStruct, error) {
	out := new(SessionDeleteByUserIdResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SessionDeleteByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SessionDeleteBySessionUniq(ctx context.Context, in *SessionDeleteBySessionUniqRequestStruct, opts ...grpc.CallOption) (*SessionDeleteBySessionUniqResponseStruct, error) {
	out := new(SessionDeleteBySessionUniqResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SessionDeleteBySessionUniq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SessionDeleteUserInfo(ctx context.Context, in *SessionDeleteUserInfoRequestStruct, opts ...grpc.CallOption) (*SessionDeleteUserInfoResponseStruct, error) {
	out := new(SessionDeleteUserInfoResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SessionDeleteUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SystemStatus(ctx context.Context, in *SystemStatusRequestStruct, opts ...grpc.CallOption) (*SystemStatusResponseStruct, error) {
	out := new(SystemStatusResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SystemTraceGoroutine(ctx context.Context, in *SystemTraceGoroutineRequestStruct, opts ...grpc.CallOption) (*SystemTraceGoroutineResponseStruct, error) {
	out := new(SystemTraceGoroutineResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SystemTraceGoroutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SystemTraceMemory(ctx context.Context, in *SystemTraceMemoryRequestStruct, opts ...grpc.CallOption) (*SystemTraceMemoryResponseStruct, error) {
	out := new(SystemTraceMemoryResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SystemTraceMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SystemCpuProfile(ctx context.Context, in *SystemCpuProfileRequestStruct, opts ...grpc.CallOption) (*SystemCpuProfileResponseStruct, error) {
	out := new(SystemCpuProfileResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SystemCpuProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SystemReloadConfig(ctx context.Context, in *SystemReloadConfigRequestStruct, opts ...grpc.CallOption) (*SystemReloadConfigResponseStruct, error) {
	out := new(SystemReloadConfigResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SystemReloadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SystemReloadSharding(ctx context.Context, in *SystemReloadShardingRequestStruct, opts ...grpc.CallOption) (*SystemReloadShardingResponseStruct, error) {
	out := new(SystemReloadShardingResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SystemReloadSharding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SystemCheckSharding(ctx context.Context, in *SystemCheckShardingRequestStruct, opts ...grpc.CallOption) (*SystemCheckShardingResponseStruct, error) {
	out := new(SystemCheckShardingResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SystemCheckSharding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) UserGetInfo(ctx context.Context, in *UsersGetInfoRequestStruct, opts ...grpc.CallOption) (*UsersGetInfoResponseStruct, error) {
	out := new(UsersGetInfoResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/UserGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) UserGetInfoList(ctx context.Context, in *UsersGetInfoListRequestStruct, opts ...grpc.CallOption) (*UsersGetInfoListResponseStruct, error) {
	out := new(UsersGetInfoListResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/UserGetInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) UserResetCache(ctx context.Context, in *UserResetCacheRequestStruct, opts ...grpc.CallOption) (*UserResetCacheResponseStruct, error) {
	out := new(UserResetCacheResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/UserResetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotCacheClient) SessionResetCache(ctx context.Context, in *SessionResetCacheRequestStruct, opts ...grpc.CallOption) (*SessionResetCacheResponseStruct, error) {
	out := new(SessionResetCacheResponseStruct)
	err := c.cc.Invoke(ctx, "/pivotCacheGrpc.pivotCache/SessionResetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PivotCacheServer is the server API for PivotCache service.
type PivotCacheServer interface {
	SessionGetInfo(context.Context, *SessionGetInfoRequestStruct) (*SessionGetInfoResponseStruct, error)
	SessionDeleteByUserId(context.Context, *SessionDeleteByUserIdRequestStruct) (*SessionDeleteByUserIdResponseStruct, error)
	SessionDeleteBySessionUniq(context.Context, *SessionDeleteBySessionUniqRequestStruct) (*SessionDeleteBySessionUniqResponseStruct, error)
	SessionDeleteUserInfo(context.Context, *SessionDeleteUserInfoRequestStruct) (*SessionDeleteUserInfoResponseStruct, error)
	SystemStatus(context.Context, *SystemStatusRequestStruct) (*SystemStatusResponseStruct, error)
	SystemTraceGoroutine(context.Context, *SystemTraceGoroutineRequestStruct) (*SystemTraceGoroutineResponseStruct, error)
	SystemTraceMemory(context.Context, *SystemTraceMemoryRequestStruct) (*SystemTraceMemoryResponseStruct, error)
	SystemCpuProfile(context.Context, *SystemCpuProfileRequestStruct) (*SystemCpuProfileResponseStruct, error)
	SystemReloadConfig(context.Context, *SystemReloadConfigRequestStruct) (*SystemReloadConfigResponseStruct, error)
	SystemReloadSharding(context.Context, *SystemReloadShardingRequestStruct) (*SystemReloadShardingResponseStruct, error)
	SystemCheckSharding(context.Context, *SystemCheckShardingRequestStruct) (*SystemCheckShardingResponseStruct, error)
	UserGetInfo(context.Context, *UsersGetInfoRequestStruct) (*UsersGetInfoResponseStruct, error)
	UserGetInfoList(context.Context, *UsersGetInfoListRequestStruct) (*UsersGetInfoListResponseStruct, error)
	UserResetCache(context.Context, *UserResetCacheRequestStruct) (*UserResetCacheResponseStruct, error)
	SessionResetCache(context.Context, *SessionResetCacheRequestStruct) (*SessionResetCacheResponseStruct, error)
}

// UnimplementedPivotCacheServer can be embedded to have forward compatible implementations.
type UnimplementedPivotCacheServer struct {
}

func (*UnimplementedPivotCacheServer) SessionGetInfo(context.Context, *SessionGetInfoRequestStruct) (*SessionGetInfoResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionGetInfo not implemented")
}
func (*UnimplementedPivotCacheServer) SessionDeleteByUserId(context.Context, *SessionDeleteByUserIdRequestStruct) (*SessionDeleteByUserIdResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteByUserId not implemented")
}
func (*UnimplementedPivotCacheServer) SessionDeleteBySessionUniq(context.Context, *SessionDeleteBySessionUniqRequestStruct) (*SessionDeleteBySessionUniqResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteBySessionUniq not implemented")
}
func (*UnimplementedPivotCacheServer) SessionDeleteUserInfo(context.Context, *SessionDeleteUserInfoRequestStruct) (*SessionDeleteUserInfoResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteUserInfo not implemented")
}
func (*UnimplementedPivotCacheServer) SystemStatus(context.Context, *SystemStatusRequestStruct) (*SystemStatusResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStatus not implemented")
}
func (*UnimplementedPivotCacheServer) SystemTraceGoroutine(context.Context, *SystemTraceGoroutineRequestStruct) (*SystemTraceGoroutineResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemTraceGoroutine not implemented")
}
func (*UnimplementedPivotCacheServer) SystemTraceMemory(context.Context, *SystemTraceMemoryRequestStruct) (*SystemTraceMemoryResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemTraceMemory not implemented")
}
func (*UnimplementedPivotCacheServer) SystemCpuProfile(context.Context, *SystemCpuProfileRequestStruct) (*SystemCpuProfileResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCpuProfile not implemented")
}
func (*UnimplementedPivotCacheServer) SystemReloadConfig(context.Context, *SystemReloadConfigRequestStruct) (*SystemReloadConfigResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemReloadConfig not implemented")
}
func (*UnimplementedPivotCacheServer) SystemReloadSharding(context.Context, *SystemReloadShardingRequestStruct) (*SystemReloadShardingResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemReloadSharding not implemented")
}
func (*UnimplementedPivotCacheServer) SystemCheckSharding(context.Context, *SystemCheckShardingRequestStruct) (*SystemCheckShardingResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckSharding not implemented")
}
func (*UnimplementedPivotCacheServer) UserGetInfo(context.Context, *UsersGetInfoRequestStruct) (*UsersGetInfoResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetInfo not implemented")
}
func (*UnimplementedPivotCacheServer) UserGetInfoList(context.Context, *UsersGetInfoListRequestStruct) (*UsersGetInfoListResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetInfoList not implemented")
}
func (*UnimplementedPivotCacheServer) UserResetCache(context.Context, *UserResetCacheRequestStruct) (*UserResetCacheResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserResetCache not implemented")
}
func (*UnimplementedPivotCacheServer) SessionResetCache(context.Context, *SessionResetCacheRequestStruct) (*SessionResetCacheResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionResetCache not implemented")
}

func RegisterPivotCacheServer(s *grpc.Server, srv PivotCacheServer) {
	s.RegisterService(&_PivotCache_serviceDesc, srv)
}

func _PivotCache_SessionGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionGetInfoRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SessionGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SessionGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SessionGetInfo(ctx, req.(*SessionGetInfoRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SessionDeleteByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteByUserIdRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SessionDeleteByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SessionDeleteByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SessionDeleteByUserId(ctx, req.(*SessionDeleteByUserIdRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SessionDeleteBySessionUniq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteBySessionUniqRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SessionDeleteBySessionUniq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SessionDeleteBySessionUniq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SessionDeleteBySessionUniq(ctx, req.(*SessionDeleteBySessionUniqRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SessionDeleteUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteUserInfoRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SessionDeleteUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SessionDeleteUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SessionDeleteUserInfo(ctx, req.(*SessionDeleteUserInfoRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStatusRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SystemStatus(ctx, req.(*SystemStatusRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SystemTraceGoroutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTraceGoroutineRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SystemTraceGoroutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SystemTraceGoroutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SystemTraceGoroutine(ctx, req.(*SystemTraceGoroutineRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SystemTraceMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTraceMemoryRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SystemTraceMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SystemTraceMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SystemTraceMemory(ctx, req.(*SystemTraceMemoryRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SystemCpuProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCpuProfileRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SystemCpuProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SystemCpuProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SystemCpuProfile(ctx, req.(*SystemCpuProfileRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SystemReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemReloadConfigRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SystemReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SystemReloadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SystemReloadConfig(ctx, req.(*SystemReloadConfigRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SystemReloadSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemReloadShardingRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SystemReloadSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SystemReloadSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SystemReloadSharding(ctx, req.(*SystemReloadShardingRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SystemCheckSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCheckShardingRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SystemCheckSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SystemCheckSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SystemCheckSharding(ctx, req.(*SystemCheckShardingRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_UserGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersGetInfoRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).UserGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/UserGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).UserGetInfo(ctx, req.(*UsersGetInfoRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_UserGetInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersGetInfoListRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).UserGetInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/UserGetInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).UserGetInfoList(ctx, req.(*UsersGetInfoListRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_UserResetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResetCacheRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).UserResetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/UserResetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).UserResetCache(ctx, req.(*UserResetCacheRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotCache_SessionResetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionResetCacheRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotCacheServer).SessionResetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pivotCacheGrpc.pivotCache/SessionResetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotCacheServer).SessionResetCache(ctx, req.(*SessionResetCacheRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _PivotCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pivotCacheGrpc.pivotCache",
	HandlerType: (*PivotCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionGetInfo",
			Handler:    _PivotCache_SessionGetInfo_Handler,
		},
		{
			MethodName: "SessionDeleteByUserId",
			Handler:    _PivotCache_SessionDeleteByUserId_Handler,
		},
		{
			MethodName: "SessionDeleteBySessionUniq",
			Handler:    _PivotCache_SessionDeleteBySessionUniq_Handler,
		},
		{
			MethodName: "SessionDeleteUserInfo",
			Handler:    _PivotCache_SessionDeleteUserInfo_Handler,
		},
		{
			MethodName: "SystemStatus",
			Handler:    _PivotCache_SystemStatus_Handler,
		},
		{
			MethodName: "SystemTraceGoroutine",
			Handler:    _PivotCache_SystemTraceGoroutine_Handler,
		},
		{
			MethodName: "SystemTraceMemory",
			Handler:    _PivotCache_SystemTraceMemory_Handler,
		},
		{
			MethodName: "SystemCpuProfile",
			Handler:    _PivotCache_SystemCpuProfile_Handler,
		},
		{
			MethodName: "SystemReloadConfig",
			Handler:    _PivotCache_SystemReloadConfig_Handler,
		},
		{
			MethodName: "SystemReloadSharding",
			Handler:    _PivotCache_SystemReloadSharding_Handler,
		},
		{
			MethodName: "SystemCheckSharding",
			Handler:    _PivotCache_SystemCheckSharding_Handler,
		},
		{
			MethodName: "UserGetInfo",
			Handler:    _PivotCache_UserGetInfo_Handler,
		},
		{
			MethodName: "UserGetInfoList",
			Handler:    _PivotCache_UserGetInfoList_Handler,
		},
		{
			MethodName: "UserResetCache",
			Handler:    _PivotCache_UserResetCache_Handler,
		},
		{
			MethodName: "SessionResetCache",
			Handler:    _PivotCache_SessionResetCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/go_pivot_cache.proto",
}
