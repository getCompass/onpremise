// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: proto/go_userbot_cache.proto

package userbot_cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// формат запроса для userbot.GetOne
type UserbotGetOneRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UserbotGetOneRequestStruct) Reset() {
	*x = UserbotGetOneRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_userbot_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserbotGetOneRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserbotGetOneRequestStruct) ProtoMessage() {}

func (x *UserbotGetOneRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_userbot_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserbotGetOneRequestStruct.ProtoReflect.Descriptor instead.
func (*UserbotGetOneRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_userbot_cache_proto_rawDescGZIP(), []int{0}
}

func (x *UserbotGetOneRequestStruct) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// формат ответа для userbot.GetOne
type UserbotGetOneResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserbotId        string `protobuf:"bytes,1,opt,name=userbot_id,json=userbotId,proto3" json:"userbot_id,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Status           int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	CompanyUrl       string `protobuf:"bytes,4,opt,name=company_url,json=companyUrl,proto3" json:"company_url,omitempty"`
	SecretKey        string `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	IsReactCommand   int64  `protobuf:"varint,6,opt,name=is_react_command,json=isReactCommand,proto3" json:"is_react_command,omitempty"`
	UserbotUserId    int64  `protobuf:"varint,7,opt,name=userbot_user_id,json=userbotUserId,proto3" json:"userbot_user_id,omitempty"`
	Extra            string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	CompanyId        int64  `protobuf:"varint,9,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	DominoEntrypoint string `protobuf:"bytes,10,opt,name=domino_entrypoint,json=dominoEntrypoint,proto3" json:"domino_entrypoint,omitempty"`
}

func (x *UserbotGetOneResponseStruct) Reset() {
	*x = UserbotGetOneResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_userbot_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserbotGetOneResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserbotGetOneResponseStruct) ProtoMessage() {}

func (x *UserbotGetOneResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_userbot_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserbotGetOneResponseStruct.ProtoReflect.Descriptor instead.
func (*UserbotGetOneResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_userbot_cache_proto_rawDescGZIP(), []int{1}
}

func (x *UserbotGetOneResponseStruct) GetUserbotId() string {
	if x != nil {
		return x.UserbotId
	}
	return ""
}

func (x *UserbotGetOneResponseStruct) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserbotGetOneResponseStruct) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserbotGetOneResponseStruct) GetCompanyUrl() string {
	if x != nil {
		return x.CompanyUrl
	}
	return ""
}

func (x *UserbotGetOneResponseStruct) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *UserbotGetOneResponseStruct) GetIsReactCommand() int64 {
	if x != nil {
		return x.IsReactCommand
	}
	return 0
}

func (x *UserbotGetOneResponseStruct) GetUserbotUserId() int64 {
	if x != nil {
		return x.UserbotUserId
	}
	return 0
}

func (x *UserbotGetOneResponseStruct) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *UserbotGetOneResponseStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *UserbotGetOneResponseStruct) GetDominoEntrypoint() string {
	if x != nil {
		return x.DominoEntrypoint
	}
	return ""
}

// формат запроса для userbot.Clear
type UserbotClearRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UserbotClearRequestStruct) Reset() {
	*x = UserbotClearRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_userbot_cache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserbotClearRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserbotClearRequestStruct) ProtoMessage() {}

func (x *UserbotClearRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_userbot_cache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserbotClearRequestStruct.ProtoReflect.Descriptor instead.
func (*UserbotClearRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_userbot_cache_proto_rawDescGZIP(), []int{2}
}

func (x *UserbotClearRequestStruct) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// формат ответа для userbot.Clear
type UserbotClearResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserbotClearResponseStruct) Reset() {
	*x = UserbotClearResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_userbot_cache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserbotClearResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserbotClearResponseStruct) ProtoMessage() {}

func (x *UserbotClearResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_userbot_cache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserbotClearResponseStruct.ProtoReflect.Descriptor instead.
func (*UserbotClearResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_userbot_cache_proto_rawDescGZIP(), []int{3}
}

var File_proto_go_userbot_cache_proto protoreflect.FileDescriptor

var file_proto_go_userbot_cache_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x62,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x22, 0x32, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xde, 0x02, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x73, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x6d, 0x69,
	0x6e, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72,
	0x62, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x32, 0xeb, 0x01, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x62,
	0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x62,
	0x6f, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x62,
	0x6f, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x62, 0x6f, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x62, 0x6f,
	0x74, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x62,
	0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x62, 0x6f,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x62,
	0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0x2c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x62, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_go_userbot_cache_proto_rawDescOnce sync.Once
	file_proto_go_userbot_cache_proto_rawDescData = file_proto_go_userbot_cache_proto_rawDesc
)

func file_proto_go_userbot_cache_proto_rawDescGZIP() []byte {
	file_proto_go_userbot_cache_proto_rawDescOnce.Do(func() {
		file_proto_go_userbot_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_go_userbot_cache_proto_rawDescData)
	})
	return file_proto_go_userbot_cache_proto_rawDescData
}

var file_proto_go_userbot_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_go_userbot_cache_proto_goTypes = []interface{}{
	(*UserbotGetOneRequestStruct)(nil),  // 0: userbotCacheGrpc.UserbotGetOneRequestStruct
	(*UserbotGetOneResponseStruct)(nil), // 1: userbotCacheGrpc.UserbotGetOneResponseStruct
	(*UserbotClearRequestStruct)(nil),   // 2: userbotCacheGrpc.UserbotClearRequestStruct
	(*UserbotClearResponseStruct)(nil),  // 3: userbotCacheGrpc.UserbotClearResponseStruct
}
var file_proto_go_userbot_cache_proto_depIdxs = []int32{
	0, // 0: userbotCacheGrpc.userbotCache.UserbotGetOne:input_type -> userbotCacheGrpc.UserbotGetOneRequestStruct
	2, // 1: userbotCacheGrpc.userbotCache.UserbotClear:input_type -> userbotCacheGrpc.UserbotClearRequestStruct
	1, // 2: userbotCacheGrpc.userbotCache.UserbotGetOne:output_type -> userbotCacheGrpc.UserbotGetOneResponseStruct
	3, // 3: userbotCacheGrpc.userbotCache.UserbotClear:output_type -> userbotCacheGrpc.UserbotClearResponseStruct
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_go_userbot_cache_proto_init() }
func file_proto_go_userbot_cache_proto_init() {
	if File_proto_go_userbot_cache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_go_userbot_cache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserbotGetOneRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_userbot_cache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserbotGetOneResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_userbot_cache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserbotClearRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_userbot_cache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserbotClearResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_go_userbot_cache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_go_userbot_cache_proto_goTypes,
		DependencyIndexes: file_proto_go_userbot_cache_proto_depIdxs,
		MessageInfos:      file_proto_go_userbot_cache_proto_msgTypes,
	}.Build()
	File_proto_go_userbot_cache_proto = out.File
	file_proto_go_userbot_cache_proto_rawDesc = nil
	file_proto_go_userbot_cache_proto_goTypes = nil
	file_proto_go_userbot_cache_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserbotCacheClient is the client API for UserbotCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserbotCacheClient interface {
	UserbotGetOne(ctx context.Context, in *UserbotGetOneRequestStruct, opts ...grpc.CallOption) (*UserbotGetOneResponseStruct, error)
	UserbotClear(ctx context.Context, in *UserbotClearRequestStruct, opts ...grpc.CallOption) (*UserbotClearResponseStruct, error)
}

type userbotCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewUserbotCacheClient(cc grpc.ClientConnInterface) UserbotCacheClient {
	return &userbotCacheClient{cc}
}

func (c *userbotCacheClient) UserbotGetOne(ctx context.Context, in *UserbotGetOneRequestStruct, opts ...grpc.CallOption) (*UserbotGetOneResponseStruct, error) {
	out := new(UserbotGetOneResponseStruct)
	err := c.cc.Invoke(ctx, "/userbotCacheGrpc.userbotCache/UserbotGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userbotCacheClient) UserbotClear(ctx context.Context, in *UserbotClearRequestStruct, opts ...grpc.CallOption) (*UserbotClearResponseStruct, error) {
	out := new(UserbotClearResponseStruct)
	err := c.cc.Invoke(ctx, "/userbotCacheGrpc.userbotCache/UserbotClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserbotCacheServer is the server API for UserbotCache service.
type UserbotCacheServer interface {
	UserbotGetOne(context.Context, *UserbotGetOneRequestStruct) (*UserbotGetOneResponseStruct, error)
	UserbotClear(context.Context, *UserbotClearRequestStruct) (*UserbotClearResponseStruct, error)
}

// UnimplementedUserbotCacheServer can be embedded to have forward compatible implementations.
type UnimplementedUserbotCacheServer struct {
}

func (*UnimplementedUserbotCacheServer) UserbotGetOne(context.Context, *UserbotGetOneRequestStruct) (*UserbotGetOneResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserbotGetOne not implemented")
}
func (*UnimplementedUserbotCacheServer) UserbotClear(context.Context, *UserbotClearRequestStruct) (*UserbotClearResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserbotClear not implemented")
}

func RegisterUserbotCacheServer(s *grpc.Server, srv UserbotCacheServer) {
	s.RegisterService(&_UserbotCache_serviceDesc, srv)
}

func _UserbotCache_UserbotGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserbotGetOneRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbotCacheServer).UserbotGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userbotCacheGrpc.userbotCache/UserbotGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbotCacheServer).UserbotGetOne(ctx, req.(*UserbotGetOneRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserbotCache_UserbotClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserbotClearRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbotCacheServer).UserbotClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userbotCacheGrpc.userbotCache/UserbotClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbotCacheServer).UserbotClear(ctx, req.(*UserbotClearRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserbotCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userbotCacheGrpc.userbotCache",
	HandlerType: (*UserbotCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserbotGetOne",
			Handler:    _UserbotCache_UserbotGetOne_Handler,
		},
		{
			MethodName: "UserbotClear",
			Handler:    _UserbotCache_UserbotClear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/go_userbot_cache.proto",
}
