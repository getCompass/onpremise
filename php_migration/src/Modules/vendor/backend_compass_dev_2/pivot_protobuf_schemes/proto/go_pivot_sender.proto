syntax = "proto3";
package pivotSenderGrpc;
option go_package = "/sender";

// сервис, который описывает все метод go_sender
service sender {

  rpc SenderSetToken(SenderSetTokenRequestStruct) returns (SenderSetTokenResponseStruct) {}
  rpc SenderSendEvent(SenderSendEventRequestStruct) returns (SenderSendEventResponseStruct) {}
  rpc SenderSendEventToAll(SenderSendEventToAllRequestStruct) returns (SenderSendEventToAllResponseStruct) {}
  rpc SenderGetOnlineConnectionsByUserId(SenderGetOnlineConnectionsByUserIdRequestStruct) returns (SenderGetOnlineConnectionsByUserIdResponseStruct) {}
  rpc SenderCloseConnectionsByUserId(SenderCloseConnectionsByUserIdRequestStruct) returns (SenderCloseConnectionsByUserIdResponseStruct) {}
  rpc SenderAddTaskPushNotification(SenderAddTaskPushNotificationRequestStruct) returns (SenderAddTaskPushNotificationResponseStruct) {}
  rpc SenderGetOnlineUsers(SenderGetOnlineUsersRequestStruct) returns (SenderGetOnlineUsersResponseStruct) {}
  rpc SenderAddUsersToThread(SenderAddUsersToThreadRequestStruct) returns (SenderAddUsersToThreadResponseStruct) {}
  rpc SenderSendTypingEvent(SenderSendTypingEventRequestStruct) returns (SenderSendTypingEventResponseStruct) {}
  rpc SenderSendThreadTypingEvent(SenderSendThreadTypingEventRequestStruct) returns (SenderSendThreadTypingEventResponseStruct) {}
  rpc SenderSendVoIP(SenderSendVoIPRequestStruct) returns (SenderSendVoIPResponseStruct) {}
  rpc SenderSendIncomingCall(SenderSendIncomingCallRequestStruct) returns (SenderSendIncomingCallResponseStruct) {}

  rpc SystemStatus(SystemStatusRequestStruct) returns (SystemStatusResponseStruct) {}
  rpc SystemTraceGoroutine(SystemTraceGoroutineRequestStruct) returns (SystemTraceGoroutineResponseStruct) {}
  rpc SystemTraceMemory(SystemTraceMemoryRequestStruct) returns (SystemTraceMemoryResponseStruct) {}
  rpc SystemCpuProfile(SystemCpuProfileRequestStruct) returns (SystemCpuProfileResponseStruct) {}
}


// формат запроса для Sender.SetToken
message SenderSetTokenRequestStruct{
  string token = 1;
  string platform = 2;
  string device_id = 3;
  int64 user_id = 4;
  int64 expire = 5;
  int64 company_id = 6;
}

// формат ответа для Sender.SetToken
message SenderSetTokenResponseStruct{
  int64 node = 1;
}

// данная структура полная копия одноименной структуры из company_protobuf_schemes
message EventUserStruct {
  int64 user_id = 1;
  int64 need_force_push = 2;
  int64 need_push = 3;
}

// формат структуры версии события
message EventVersionItem {
  int32 version = 1;
  bytes data = 2;
}

// формат запроса для Sender.SendEvent
message SenderSendEventRequestStruct {
  repeated EventUserStruct user_list = 1;
  string event = 2;
  repeated EventVersionItem event_version_list = 3;
  string push_data = 4;
  string ws_users = 5;
  string uuid = 6;
  string routine_key = 7;
  int64 company_id = 8;
}

// формат ответа для Sender.SendEvent
message SenderSendEventResponseStruct {}

// формат запроса для Sender.SendEventToAll
message SenderSendEventToAllRequestStruct {
  string event = 1;
  repeated EventVersionItem event_version_list = 2;
  string push_data = 3;
  string ws_users = 4;
  string uuid = 5;
  string routine_key = 6;
  int64 is_need_push = 7;
  int64 company_id = 8;
}

// формат ответа для Sender.SendEventToAll
message SenderSendEventToAllResponseStruct {}

// формат запроса для Sender.GetOnlineConnectionsByUserId
message SenderGetOnlineConnectionsByUserIdRequestStruct {
  int64 user_id = 1;
  int64 company_id = 2;
}

message ConnectionInfoStruct{
  int64 sender_node_id = 1;
  int64 connection_id = 2;
  int64 user_id = 3;
  string ip_address = 4;
  int64 connected_at = 5;
  string user_agent = 6;
  string platform = 7;
  int64 is_focused = 8;
}

// формат ответа для Sender.GetOnlineConnectionsByUserId
message SenderGetOnlineConnectionsByUserIdResponseStruct {
  repeated ConnectionInfoStruct online_connection_list = 1;
}

// формат запроса для Sender.CloseConnectionsByUserId
message SenderCloseConnectionsByUserIdRequestStruct {
  int64 user_id = 1;
  int64 company_id = 2;
}

// формат ответа для Sender.CloseConnectionsByUserId
message SenderCloseConnectionsByUserIdResponseStruct {}

// формат запроса для Sender.AddTaskPushNotification
message SenderAddTaskPushNotificationRequestStruct {
  repeated int64 user_list = 1;
  string push_data = 2;
  string uuid = 3;
  int64 company_id = 4;
}

// формат ответа для Sender.AddTaskPushNotification
message SenderAddTaskPushNotificationResponseStruct {}

// формат запроса для Sender.SenderGetOnlineUsersRequestStruct
message SenderGetOnlineUsersRequestStruct {
  repeated int64 user_list = 1;
  int64 company_id = 2;
}

// формат ответа для Sender.GetOnlineUsers
message SenderGetOnlineUsersResponseStruct {
  repeated int64 online_user_list = 1;
  repeated int64 offline_user_list = 2;
}

// формат запроса для Sender.AddUsersToThread
message SenderAddUsersToThreadRequestStruct {
  string thread_key = 1;
  repeated int64 user_list = 2;
  string routine_key = 3;
  int64 company_id = 4;
}

// формат ответа для Sender.AddUsersToThread
message SenderAddUsersToThreadResponseStruct {}

// формат запроса для Sender.SendTypingEvent
message SenderSendTypingEventRequestStruct {
  repeated int64 user_list = 1;
  string event = 2;
  repeated EventVersionItem event_version_list = 3;
  string routine_key = 4;
  int64 company_id = 5;
}

// формат ответа для Sender.SendTypingEvent
message SenderSendTypingEventResponseStruct {}

// формат запроса для Sender.SendThreadTypingEvent
message SenderSendThreadTypingEventRequestStruct {
  repeated int64 user_list = 1;
  string event = 2;
  repeated EventVersionItem event_version_list = 3;
  int64 company_id = 4;
}

// формат ответа для Sender.SendThreadTypingEvent
message SenderSendThreadTypingEventResponseStruct {}

// формат запроса для Sender.SendVoIP
message SenderSendVoIPRequestStruct {
  int64 user_id = 1;
  string push_data = 2;
  string uuid = 3;
  int64 time_to_live = 4;
  string routine_key = 5;
  int64 company_id = 6;
}

// формат ответа для Sender.SendVoIP
message SenderSendVoIPResponseStruct {}

// формат запроса для Sender.SendIncomingCall
message SenderSendIncomingCallRequestStruct {
  int64 user_id = 1;
  repeated EventVersionItem event_version_list = 2;
  string push_data = 3;
  string ws_users = 4;
  string uuid = 5;
  int64 time_to_live = 6;
  string routine_key = 7;
  int64 company_id = 8;
}

// формат ответа для Sender.SendIncomingCall
message SenderSendIncomingCallResponseStruct {}

// формат запроса для system.status
message SystemStatusRequestStruct {}

// формат ответа для system.status
message SystemStatusResponseStruct {
  string name = 1;
  int64 goroutines = 2;
  int64 memory = 3;
  string memory_kb = 4;
  string memory_mb = 5;
  int32 uptime = 6;
}

// формат запроса для system.traceGoroutine
message SystemTraceGoroutineRequestStruct {}

// формат ответа для system.traceGoroutine
message SystemTraceGoroutineResponseStruct {}

// формат запроса для system.traceMemory
message SystemTraceMemoryRequestStruct {}

// формат ответа для system.traceMemory
message SystemTraceMemoryResponseStruct {}

// формат запроса для system.cpuProfile
message SystemCpuProfileRequestStruct {
  int64 time = 1;
}

// формат ответа для system.cpuProfile
message SystemCpuProfileResponseStruct {}